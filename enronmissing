import networkx as nx
nx.__version__
%pwd
handle = open('Enron_missing_links.txt')
enron = nx.Graph()
import re
for line in handle:
    line=line.strip()
    person = line.split()
    ed = (person[0],person[1])
    enron.add_edge(*ed) # unpack edge tuple*
enron.edges()
enron.nodes()
%pylab inline
nx.draw(enron)
nx.all_pairs_shortest_path(enron)
paths = nx.all_pairs_shortest_path(enron)
nodes = enron.nodes()
paths
nodes
for n in nodes:
    for m in nodes:
        print n,m, paths[n][m] 
import sets
for n in nodes:
    for m in nodes:
        if n!=m and not enron.has_edge(n,m):
            print n,m, len(sets.Set(enron[n]).intersection(sets.Set(enron[m])))
for n in nodes:
    for m in nodes:
        if n!=m and not enron.has_edge(n,m):
            print n,m, (0. + len(sets.Set(enron[n]).intersection(sets.Set(enron[m])))) / len(sets.Set(enron[n]).union(sets.Set(enron[m])))
for v in nx.jaccard_coefficient(enron):
    print v
for v in nx.adamic_adar_index(enron):
    print v
for v in nx.preferential_attachment(enron):
    print v
